{"_type":"export","__export_format":4,"__export_date":"2023-07-06T06:31:35.866Z","__export_source":"insomnia.desktop.app:v2023.4.0","resources":[{"_id":"req_8454386d59a3467e9c59167401d34527","parentId":"fld_136d851050ec47718f6d79c67b0e029e","modified":1688622535433,"created":1688337250602,"url":"{{ _[5000] }}/api/auth/register","name":"Register ","description":"**Register User**\n\n- Endpoint: /api/auth/register\n- Method: POST\n\nDescription:\nThis API endpoint allows users to register and create a new account.\n\nRequest Body:\n- firstName (string, required): The user's first name.\n- lastName (string, required): The user's last name.\n- email (string, required): The email address of the user.\n- password (string, required): The password for the user's account. The password must meet the following complexity requirements:\n  - Minimum length: 8 characters.\n  - At least one uppercase letter.\n  - At least one lowercase letter.\n  - At least one numeric digit.\n  - At least one special character (!@#$%^&*).\n\n\nUsage Notes:\n- Upon successful registration, the user will receive a verification email to verify their email address.\n- Users must verify their email address before they can log in.\n- Users cannot log in until their account is activated by an administrator.\n- When the user's account is activated by an admin, the user will receive their unique userId via email.\n***\n<!-- REQUEST -->\n- Example Request:\n  - POST /api/auth/register\n- Content-Type:  application/json\n\n```\n{\n  \"firstName\": \"Admin\",\n  \"lastName\": \"Admin\",\n  \"email\": \"daa1b530b6@mymaily.lol\",\n  \"password\": \"taha123456T@\"\n}\n\n```\n<!-- END REQUEST -->\n***\nResponse:\n- 201 Created: The user account was successfully created.\n- 400 Bad Request: The request was invalid or missing required fields, or the password complexity requirements are not met.\n- 500 Internal Server Error: An error occurred on the server.\n\n<!-- RESPONSE -->\n- Example Response:\n  - HTTP/1.1 201 Created\n- Content-Type: \n  - application/json\n\n```\n{\n  \"message\": \"You have registered successfully. Please check your email for verification.\"\n}\n\n```\n<!-- END RESPONSE -->\n","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"firstName\": \"Admin\",\n\t\"lastName\": \"Admin\",\n\t\"email\": \"daa1b530b6@mymaily.lol\",\n\t\"password\": \"taha123456T@\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1688337902495.586,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_136d851050ec47718f6d79c67b0e029e","parentId":"fld_131a77abacc14e80a1c5615b68f74342","modified":1688337907678,"created":1688337907678,"name":"Authorization","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1688337907679,"_type":"request_group"},{"_id":"fld_131a77abacc14e80a1c5615b68f74342","parentId":"wrk_e0b8fb234b8e4ce78d30ff7cab7ed2a2","modified":1688427989125,"created":1688336839556,"name":"Users","description":"","environment":{"3000":"http://localhost:3000","5000":"http://localhost:5000"},"environmentPropertyOrder":{"&":["3000","5000"]},"metaSortKey":-1688336839556,"_type":"request_group"},{"_id":"wrk_e0b8fb234b8e4ce78d30ff7cab7ed2a2","parentId":null,"modified":1687523002653,"created":1687523002653,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_b91fbc0fa356480898fbc6162ecc0f9e","parentId":"fld_136d851050ec47718f6d79c67b0e029e","modified":1688622421448,"created":1688337780639,"url":"{{ _[5000] }}/api/auth/login","name":"Login","description":"**User Login**\n\n- Endpoint: \n  - /api/auth/login\n- Method:\n  - POST\n\nDescription:\nThis API endpoint allows users to log in to their account. Users can only log in if their email is already verified and their account has been activated by an administrator. The user needs to provide their unique userId (received when the account is activated) and password to log in.\n\nRequest Body:\n- userId (string, required): The unique userId of the user (received when the account is activated).\n- password (string, required): The password for the user's account. The password must meet the following complexity requirements:\n  - Minimum length: 8 characters.\n  - At least one uppercase letter.\n  - At least one lowercase letter.\n  - At least one numeric digit.\n  - At least one special character (!@#$%^&*).\n\nUsage Notes:\n- Users can only log in if their email is already verified and their account has been activated by an administrator.\n- Upon successful login, the user will receive an authentication token that can be used to authenticate subsequent requests.\n\n<!-- REQUEST -->\n- Example Request:\n  - POST /api/auth/login\n- Content-Type: \n  - application/json\n\t\n```\n{\n  \"userId\": 405251869,\n  \"password\": \"taha123456T@\"\n}\n\n```\n<!-- END REQUEST -->\n***\nResponse:\n- 200 OK: Login successful. Returns an authentication token.\n- 400 Bad Request: The request was invalid or missing required fields, or the password complexity requirements are not met.\n- 401 Unauthorized: Invalid credentials provided or the account is not verified/activated.\n- 403 Forbidden: Account is not active or email is not verified.\n- 500 Internal Server Error: An error occurred on the server.\n\n<!-- RESPONSE -->\n- Example Response:\n  - HTTP/1.1 200 OK\n- Content-Type: application/json\n\n```\n{\n  \"message\": \"Login successful\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTYyZGU2Njk2OWVlMmQ1YzUyMWMwZSIsInVzZXJJZCI6NDA1MjUxODY5LCJyb2xlIjoic3R1ZGVudCIsImlhdCI6MTY4ODYxNDk0M30.nvyGuHXyDxe_1Yd-NeH7Eg-IFQP598trg_DU8IPAGUI\"\n}\n```\n<!-- END RESPONSE -->\n","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"userId\":405251869,\n\t\"password\":\"taha123456T@$\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1688337902545.586,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_24183853a9894dc98c58d0551eedb7b8","parentId":"fld_4c0701b14dd3485f8ec39a2fb60d5868","modified":1688622291595,"created":1688337981608,"url":"{{ _[5000] }}/api/user/64a62de66969ee2d5c521c0e/activate","name":"Activate User Account","description":"**Activate User Account (Admin)**\n\n- Endpoint: \n  - /api/user/:id/activate\n- Method: \n  - GET\n\nDescription:\nThis API endpoint allows the administrator to activate a user's account. The endpoint is accessible only to admin users. The user's account will be marked as active, and an email will be sent to the user containing their unique userId.\n \n\nURL Parameters:\n- id (string, required): The unique identifier of the user.\n\nUsage Notes:\n- This endpoint is accessible only to admin users.\n- When the user's account is activated, an email will be sent to the user containing their unique userId.\n- The user will be able to log in after their account is activated.\n\n***\n\n<!-- REQUEST -->\n- Example Request:\n  - GET /api/user/:id/activate\n- Content-Type: \n  - application/json\n- Authorization: \n  - Bearer [admin_token]\n<!-- END REQUEST -->\n\n***\n\nResponse:\n- 200 OK: User account activated successfully.\n- 400 Bad Request: User account is already active.\n- 404 Not Found: User not found.\n- 500 Internal Server Error: An error occurred on the server.\n\n<!-- RESPONSE -->\n- Example Response:\n  - HTTP/1.1 200 OK\n- Content-Type: \n  - application\n\t\n```\n{\n  \"message\": \"Account activated successfully\"\n}\n```\n<!-- END RESPONSE -->\n","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTYyZGU2Njk2OWVlMmQ1YzUyMWMwZSIsInVzZXJJZCI6NDA1MjUxODY5LCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODg2MjAyNjd9.exLWFB3vvNy8YGcjjyR26L8N2HqBBo7Ka_rLsfpiyUA"},"metaSortKey":-1688337981608,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_4c0701b14dd3485f8ec39a2fb60d5868","parentId":"fld_131a77abacc14e80a1c5615b68f74342","modified":1688337975640,"created":1688337975640,"name":"User Ctrl","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1688337975640,"_type":"request_group"},{"_id":"req_c029040055854a249f3f6b4acf6b553c","parentId":"fld_4c0701b14dd3485f8ec39a2fb60d5868","modified":1688623117476,"created":1688338788019,"url":"{{ _[5000] }}/api/user","name":"Get All Users","description":"**Get All Users (Admin)**\n\n- Endpoint: \n  - /api/user\n- Method: \n  - GET\n\nDescription:\nThis API endpoint allows the administrator to retrieve information about all registered users. The endpoint is accessible only to admin users.\n\n\nUsage Notes:\n- This endpoint is accessible only to admin users.\n- User passwords are excluded from the response for security reasons.\n\n<!-- REQUEST -->\n- Example Request:\n  - GET /api/user\n- Request Headers:\n  - Authorization: Bearer [admin_token]\n\n<!-- END REQUEST -->\n***\nResponse:\n- 200 OK: User information retrieved successfully.\n- 404 Not Found: No users found.\n- 500 Internal Server Error: An error occurred on the server.\n\n<!-- RESPONSE -->\n- Example Response:\n   - HTTP/1.1 200 OK\n- Content-Type: \n  - application/json\n\t\n```\n[\n  {\n    \"_id\": \"64a1fd3cedf3a3b8f6e0d3cc\",\n    \"firstName\": \"Taha\",\n    \"lastName\": \"Hamdy\",\n    \"email\": \"TahaHamdy@gmail.com\",\n    \"userId\": 775350605,\n    \"isVerified\": false,\n    \"isActive\": true,\n    \"role\": \"student\",\n    \"profilePhoto\": {\n      \"url\": \"https://res.cloudinary.com/dy0u4tqj4/image/upload/v1688357236/uu87vryvr8sgirpcuzu9.png\",\n      \"publicId\": \"uu87vryvr8sgirpcuzu9\"\n    },\n    \"cvs\": [],\n    \"articles\": [],\n    \"certificates\": [],\n\t\t\"courses\": [\n\t\t{\n\t\t\t\"_id\": \"64a22713514428bdc4a013fc\",\n\t\t\t\"name\": \"software\",\n\t\t\t\"instructor\": \"64a1fd3cedf3a3b8f6e0d3cc\",\n\t\t\t\"level\": 1,\n\t\t\t\"numLessons\": 10,\n\t\t\t\"language\": \"js,css,html\",\n\t\t\t\"startDate\": \"20/10/2022\",\n\t\t\t\"duration\": 6,\n\t\t\t\"certificate\": false,\n\t\t\t\"intro\": \"books\",\n\t\t\t\"assessment\": \"ass one,ass two\",\n\t\t\t\"requirements\": \"html,css\",\n\t\t\t\"materials\": \"books,CD\",\n\t\t\t\"publishDate\": \"1/11/2023\",\n\t\t\t\"image\": \"uploads/courses/default.png\",\n\t\t\t\"enroll\": [\n\t\t\t\t\"64a1fd3cedf3a3b8f6e0d3cc\",\n\t\t\t\t\"64a1ff03edf3a3b8f6e0d3dc\",\n\t\t\t\t\"64a3b49463d9b4ac32b355ef\"\n\t\t\t],\n\t\t\t\"__v\": 0\n\t\t}\n\t],\n    \"exams\": [],\n    \"__v\": 0,\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTRjNTc0ZTRmMjcwNTgyYTRiMDhmMCIsInVzZXJJZCI6Nzk1NjUxNzgzLCJyb2xlIjoic3R1ZGVudCIsImlhdCI6MTY4ODYxNDk0M30.nvyGuHXyDxe_1Yd-NeH7Eg-IFQP598trg_DU8IPAGUI\"\n  },\n  // More user objects...\n]\n```\n\n<!-- END RESPONSE -->\n","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTYyZGU2Njk2OWVlMmQ1YzUyMWMwZSIsInVzZXJJZCI6NDA1MjUxODY5LCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODg2MjAyNjd9.exLWFB3vvNy8YGcjjyR26L8N2HqBBo7Ka_rLsfpiyUA","disabled":false},"metaSortKey":-1688337942076.793,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_5dcce64a1afc47a784bf332995c6a9cd","parentId":"fld_4c0701b14dd3485f8ec39a2fb60d5868","modified":1688623808124,"created":1688346935439,"url":"{{ _[5000] }}/api/user/64a4c574e4f270582a4b08f0","name":"Get User By Id","description":"**Get User Profile**\n\n- Endpoint: \n  - /api/user/:id\n- Method: \n  - GET\n\nDescription:\nThis API endpoint allows users to retrieve the profile information of a specific user.\n\nURL Parameters:\n- id (string, required): The unique identifier of the user.\n\nUsage Notes:\n- Users must be authenticated to access this endpoint.\n- The response will include the user's profile information, excluding the password.\n\n<!-- REQUEST -->\n- Example Request:\n  - GET /api/user/:id\n<!-- END REQUEST -->\n***\nResponse:\n- 200 OK: User profile retrieved successfully.\n- 404 Not Found: User not found.\n- 500 Internal Server Error: An error occurred on the server.\n\n<!-- RESPONSE -->\n- Example Response:\n  - HTTP/1.1 200 OK\n- Content-Type:\n  - application/json\n\t\n```\n[\n\n\t{\n\t\"_id\": \"64a4c574e4f270582a4b08f0\",\n\t\"firstName\": \"admin\",\n\t\"lastName\": \"admin\",\n\t\"email\": \"e05a836982@mymaily.lol\",\n\t\"userId\": 795651783,\n\t\"isVerified\": true,\n\t\"isActive\": true,\n\t\"role\": \"admin\",\n\t\"profilePhoto\": {\n\t\t\"url\": \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\n\t\t\"publicId\": null\n\t},\n\t\"courses\": [\n\t\t{\n\t\t\t\"_id\": \"64a22713514428bdc4a013fc\",\n\t\t\t\"name\": \"software\",\n\t\t\t\"instructor\": \"64a1fd3cedf3a3b8f6e0d3cc\",\n\t\t\t\"level\": 1,\n\t\t\t\"numLessons\": 10,\n\t\t\t\"language\": \"js,css,html\",\n\t\t\t\"startDate\": \"20/10/2022\",\n\t\t\t\"duration\": 6,\n\t\t\t\"certificate\": false,\n\t\t\t\"intro\": \"books\",\n\t\t\t\"assessment\": \"ass one,ass two\",\n\t\t\t\"requirements\": \"html,css\",\n\t\t\t\"materials\": \"books,CD\",\n\t\t\t\"publishDate\": \"1/11/2023\",\n\t\t\t\"image\": \"uploads/courses/default.png\",\n\t\t\t\"enroll\": [\n\t\t\t\t\"64a1fd3cedf3a3b8f6e0d3cc\",\n\t\t\t\t\"64a1ff03edf3a3b8f6e0d3dc\",\n\t\t\t\t\"64a3b49463d9b4ac32b355ef\"\n\t\t\t],\n\t\t\t\"__v\": 0\n\t\t}\n\t],\n\t\"createdAt\": \"2023-07-05T01:20:52.096Z\",\n\t\"updatedAt\": \"2023-07-05T01:22:11.205Z\",\n\t\"__v\": 0,\n\t\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTRjNTc0ZTRmMjcwNTgyYTRiMDhmMCIsInVzZXJJZCI6Nzk1NjUxNzgzLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODg1MjAxMzF9.tufmXQ5J20NJD6eqiALvqX-k7zdm1Qd5nMwrApmGlMg\"\n}\n  ...\n]\n\n```\n<!-- END RESPONSE -->\n","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTRjNTc0ZTRmMjcwNTgyYTRiMDhmMCIsInVzZXJJZCI6Nzk1NjUxNzgzLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODg1MjAxMzF9.tufmXQ5J20NJD6eqiALvqX-k7zdm1Qd5nMwrApmGlMg"},"metaSortKey":-1688346935439,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_787c506083914572aff08b9342563b27","parentId":"fld_4c0701b14dd3485f8ec39a2fb60d5868","modified":1688623692231,"created":1688355806267,"url":"{{ _[5000] }}/api/user/64a62de66969ee2d5c521c0e","name":"Update User By Id","description":"**Update User**\n\n- Endpoint: \n  - /api/user/:id\n- Method: \n   - PUT\n\nDescription:\nThis API endpoint allows a user to update their profile information. The user can update the following fields: firstName, lastName, email, phoneNumber, age, graduationYear, about, nationality, country, city, university, and major.\n\nUsage Notes:\n- This endpoint requires user authentication using a valid user token.\n- Only the fields provided in the request body will be updated.\n- If the email is being updated, it will be validated for uniqueness.\n- The profile image should be uploaded as a file in the \"image\" field.\n- The updated user object, excluding the password, will be returned in the response.\n\nRequest Headers:\n- Authorization: Bearer [user_token]\n\nURL Parameters:\n- id (string, required): The unique identifier of the user.\n\n***\nRequest Body:\n- firstName (string): The updated first name of the user.\n- lastName (string): The updated last name of the user.\n- email (string): The updated email address of the user.\n- phoneNumber (string): The updated phone number of the user.\n- age (number): The updated age of the user.\n- graduationYear (number): The updated graduation year of the user.\n- about (string): The updated about section of the user.\n- nationality (string): The updated nationality of the user.\n- country (string): The updated country of the user.\n- city (string): The updated city of the user.\n- university (string): The updated university of the user.\n- major (string): The updated major of the user.\n- image (file): The updated profile image of the user.\n\n<!-- REQUEST -->\n- Example Request:\n  - PUT /api/user/:id\n- Content-Type:\n  - application/json\n- Authorization: \n   - Bearer [user_token]\n\n```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"phoneNumber\": \"1234567890\",\n  \"age\": 30,\n  \"graduationYear\": 2022,\n  \"about\": \"Updated about section\",\n  \"nationality\": \"Updated nationality\",\n  \"country\": \"Updated country\",\n  \"city\": \"Updated city\",\n  \"university\": \"Updated university\",\n  \"major\": \"Updated major\",\n\t\"image\": [Select image file]\n}\n\n```\n<!-- END REQUEST -->\n\n\n***\nResponse:\n- 200 OK: User updated successfully. Returns the updated user object.\n- 400 Bad Request: Invalid request body or email already in use.\n- 404 Not Found: User not found.\n- 500 Internal Server Error: An error occurred on the server.\n\n<!-- RESPONSE -->\n- Example Response:\n  - HTTP/1.1 200 OK\n- Content-Type: \n  - application/json\n\n```\n{\n\t\"message\": \"User updated successfully\",\n\t\"updatedUser\": {\n\t\t\"_id\": \"64a62de66969ee2d5c521c0e\",\n\t\t\"firstName\": \"John\",\n\t\t\"lastName\": \"Doe\",\n\t\t\"email\": \"newemail@example.com\",\n\t\t\"userId\": 405251869,\n\t\t\"isEmailVerified\": true,\n\t\t\"isActive\": true,\n\t\t\"role\": \"admin\",\n\t\t\"profilePhoto\": {\n\t\t\t\"url\": \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png\",\n\t\t\t\"publicId\": null\n\t\t},\n\t\t\"courses\": [],\n\t\t\"createdAt\": \"2023-07-06T02:58:46.689Z\",\n\t\t\"updatedAt\": \"2023-07-06T06:00:35.119Z\",\n\t\t\"__v\": 0,\n\t\t\"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTYyZGU2Njk2OWVlMmQ1YzUyMWMwZSIsInVzZXJJZCI6NDA1MjUxODY5LCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODg2MjAyNjd9.exLWFB3vvNy8YGcjjyR26L8N2HqBBo7Ka_rLsfpiyUA\",\n\t\t\"about\": \"I'm a software developer\",\n\t\t\"age\": 30,\n\t\t\"city\": \"New York\",\n\t\t\"country\": \"United States\",\n\t\t\"graduationYear\": 2023,\n\t\t\"major\": \"Computer Science\",\n\t\t\"nationality\": \"USA\",\n\t\t\"phoneNumber\": 1234567890,\n\t\t\"university\": \"ABC University\"\n\t}\n}\n\n```\n<!-- END RESPONSE -->\n","method":"PUT","body":{"mimeType":"application/json","text":"{\n\t\"firstName\": \"John\",\n\t\"lastName\": \"Doe\",\n\t\"email\": \"newemail@example.com\",\n\t\"phoneNumber\": \"1234567890\",\n\t\"age\": 30,\n\t\"graduationYear\": 2023,\n\t\"about\": \"I'm a software developer\",\n\t\"nationality\": \"USA\",\n\t\"country\": \"United States\",\n\t\"city\": \"New York\",\n\t\"university\": \"ABC University\",\n\t\"major\": \"Computer Science\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_39b0882628494a0295b472cf15a29e0d"}],"authentication":{"type":"bearer","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTYyZGU2Njk2OWVlMmQ1YzUyMWMwZSIsInVzZXJJZCI6NDA1MjUxODY5LCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODg2MjAyNjd9.exLWFB3vvNy8YGcjjyR26L8N2HqBBo7Ka_rLsfpiyUA"},"metaSortKey":-1688345401408.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_2727ba5c96b144da88e22c96771b498f","parentId":"fld_4c0701b14dd3485f8ec39a2fb60d5868","modified":1688534853334,"created":1688357385800,"url":"{{ _[5000] }}/api/user/new","name":"Create New User [\"admin\"}","description":"**Create New User (Admin)**\n\n- Endpoint: /api/user/new\n- Method: POST\n\nDescription:\nThis API endpoint allows administrators to create a new user account.\n\nRequest Body:\n- firstName (string, required): The first name of the user.\n- lastName (string, required): The last name of the user.\n- email (string, required): The email address of the user.\n- password (string, required): The password for the user's account.\n- userId (string, optional): The unique user ID (9-digit number) for the user.\n- phoneNumber (string, optional): The phone number of the user.\n- role (string, optional): The role of the user. Can be \"admin\", \"instructor\", \"student\", or \"editor\". Default is \"student\".\n- isActive (boolean, optional): Specifies if the user account is active. Default is false.\n\nResponse:\n- 201 Created: The user account was successfully created.\n- 400 Bad Request: The request was invalid or missing required fields.\n- 500 Internal Server Error: An error occurred on the server.\n\nUsage Notes:\n- Only administrators can access this endpoint.\n- Upon successful creation, the user will receive an email with their unique user ID (if provided).\n- If the userId field is not provided, a unique 9-digit user ID will be automatically generated.\n- The user's account will be inactive until activated by an administrator.\n\n<!-- REQUEST -->\nExample Request:\nPOST /api/users\nContent-Type: application/json\nAuthorization: Bearer [admin_token]\n\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"password123\",\n  \"userId\": \"123456789\",\n  \"phoneNumber\": \"1234567890\",\n  \"role\": \"instructor\",\n  \"isActive\": true\n}\n<!-- END REQUEST -->\n\n<!-- RESPONSE -->\n- Example Response:\n  - HTTP/1.1 201 Created\n- Content-Type: application\n\n- if account status === true \n\n{\n\"message\":\"User account created successfully. An email has been sent to the user with their unique user ID.\"\n}\n\n- if account status ===false \n\n{\n  \"message\": \"User account created successfully.\"\n}\n<!-- END RESPONSE -->\n","method":"POST","body":{"mimeType":"application/x-www-form-urlencoded","params":[{"id":"pair_9c05006a6a3844f2afd081a0b7e7de19","name":"firstName","value":"byAdmin2","description":""},{"id":"pair_2eb11bbf6a3c46cfa33f0c38654ffe7f","name":"lastName","value":"Hamdy","description":""},{"id":"pair_e7ef89f21b7f46f4a174f50826700b09","name":"email","value":"Taha6464fh2@gmail.com","description":""},{"id":"pair_a328a38d84a2457db87828f9e66e6827","name":"password","value":"taha132456T@","description":""},{"id":"pair_9ad2305c800a40668d2c49a754353363","name":"userId","value":"115141479","description":""},{"id":"pair_db5e00ad3e92463aaf2acf42f6e59450","name":"role","value":"instructor","description":""},{"id":"pair_3646b3b6ad204cf3a10e7c8eed885fd7","name":"isActive","value":"true","description":""}]},"parameters":[],"headers":[{"name":"Content-Type","value":"application/x-www-form-urlencoded"}],"authentication":{"type":"bearer","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTFmZjAzZWRmM2EzYjhmNmUwZDNkYyIsInVzZXJJZCI6NDg1MjAzNzYzLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODg0MjgxMzh9.5zl3rj4uXZrA0xFwSSP73pXGVE1uoZe2z7NrBwRO6Kg"},"metaSortKey":-1688357385800,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_db8fadf04dcc45539a1de50db8035f60","parentId":"fld_4c0701b14dd3485f8ec39a2fb60d5868","modified":1688625063478,"created":1688357692583,"url":"{{ _[5000] }}/api/user/64a250f7e24663089b7a8f7f","name":"Delete User","description":"**Delete User**\n\n- Endpoint: \n  - /api/user/:id\n- Method: \n   - DELETE\n\nDescription:\nThis API endpoint allows a user to delete their own account or an admin to delete any user account. Only the user themselves or an admin can perform this action.\n\nRequest Headers:\n- Authorization: \n   - Bearer [user||admin_token]\n\nURL Parameters:\n- id (string, required): The unique identifier of the user to be deleted.\n\n\nUsage Notes:\n- This endpoint requires user authentication using a valid user token.\n- Only the user themselves or an admin can delete the user account.\n- Deleting a user account will also delete their associated data such as profile photo, courses, CVs, articles, certificates, and exams.\n- Once deleted, the user will no longer be able to log in and access their account.\n***\n<!-- REQUEST -->\n- Example Request:\n  - DELETE /api/user/:id\n- Authorization: \n   - Bearer [user || admin_token]\n\n<!-- END REQUEST -->\n***\nResponse:\n- 200 OK: User deleted successfully.\n- 404 Not Found: User not found.\n- 500 Internal Server Error: An error occurred on the server.\n\n<!-- RESPONSE -->\n- Example Response:\n  - HTTP/1.1 200 OK\n- Content-Type: \n  - application/json\n\n```\n{\n  \"message\": \"User deleted successfully\"\n}\n\n```\n<!-- END RESPONSE -->\n","method":"DELETE","body":{},"parameters":[],"headers":[],"authentication":{"type":"bearer","token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0YTFmZjAzZWRmM2EzYjhmNmUwZDNkYyIsInVzZXJJZCI6NDg1MjAzNzYzLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2ODg0MjgxMzh9.5zl3rj4uXZrA0xFwSSP73pXGVE1uoZe2z7NrBwRO6Kg"},"metaSortKey":-1688357692583,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_eecab6aabd724f4585e204a4bac11b8a","parentId":"fld_4c0701b14dd3485f8ec39a2fb60d5868","modified":1688619310080,"created":1688530509951,"url":"{{ _[5000] }}/api/user/83d5093ecbae97d046d9dafa9f3cdee624c5f4ce/verify-email","name":"Verify Email","description":"**Verify Email**\n\n- Endpoint: \n   - /api/user/:token/verify-email\n- Method:\n  - POST\n\nDescription:\nThis API endpoint allows users to verify their email address using the verification token sent to their email. The token should be provided as a URL parameter.\n\nURL Parameters:\n- token (string, required): The verification token sent to the user's email address.\n\nUsage Notes:\n- Users should click on the verification link provided in their email to access this endpoint.\n- Upon successful verification, the user's email will be marked as verified.\n\n\n***\n\nResponse:\n- 200 OK: Email verification successful.\n- 400 Bad Request: The verification link has expired. Please resend the email.\n- 404 Not Found: User not found.\n- 500 Internal Server Error: An error occurred on the server.\n\n***\n<!-- REQUEST -->\n- Example Request:\n   - POST /api/user/:token/verify-email\n<!-- END REQUEST -->\n\n***\n<!-- RESPONSE -->\n- Example Response:\n   - HTTP/1.1 200 OK\n- Content-Type:\n  - application/json\n\t\n```\n{\n  \"message\": \"Your email has been verified successfully.\"\n}\n\n```\n\n<!-- END RESPONSE -->\n","method":"POST","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1688530509951,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_9fbeb4aedc654932808b763dd03b34b8","parentId":"fld_53f2ae1fd8614b9d8dcc34c99895696d","modified":1688619073262,"created":1688440466338,"url":"{{ _[5000] }}/api/password/forgot-password","name":"Forgot Password ","description":"**Forgot Password**\n\n- Endpoint: \n  - /api/password/forgot-password\n- Method:\n  - POST\n\nDescription:\nThis API endpoint allows users to request a password reset email. The user needs to provide their email address associated with their account.\n\nUsage Notes:\n- Upon receiving the password reset email, the user can follow the instructions to reset their password.\n\n<!-- REQUEST -->\n***\n**REQUEST**\n\nRequest Body:\n- email (string, required): The email address of the user.\n\n***\n- Example Request:\n  - POST /api/password/forgot-password\n- Content-Type:\n  - application/json\n\n```\n{\n\"email\":\"e05a836982@mymaily.lol\"\n}\n\n```\n\n***\n<!-- RESPONSE -->\n**RESPONSE**\n\n- 200 OK: The password reset email has been sent successfully.\n- 404 Not Found: User not found.\n- 500 Internal Server Error: An error occurred on the server.\n\n***\n- Response Example: \n  - HTTP/1.1 200 OK\n- Content-Type:\n  - application/json\n\n```\n{\n  \"message\": \"Password reset email sent\"\n}\n\n```\n\n","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"email\":\"28047e7d28@mymaily.lol\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1688440466338,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_53f2ae1fd8614b9d8dcc34c99895696d","parentId":"fld_131a77abacc14e80a1c5615b68f74342","modified":1688440462765,"created":1688440462765,"name":"Password Ctrl","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1688440462765,"_type":"request_group"},{"_id":"req_c6c93a7775fb4d2ca10f7e182f57cd9a","parentId":"fld_53f2ae1fd8614b9d8dcc34c99895696d","modified":1688618920722,"created":1688443701547,"url":"{{ _[5000] }}/api/password/5e6ede5b09ae2f4bdca1ec156af2db1c5836d263/reset-password","name":"Reset Password ","description":"**Reset Password**\n\n- Endpoint: \n  - /api/password/:token/reset-password\n- Method: \n  - POST\n\nDescription:\nThis API endpoint allows users to reset their password using a reset token received via email. The user needs to provide the reset token and their new password.\n\nURL Parameters:\n- token (string, required): The reset token received via email.\n\nUsage Notes:\n- Users should click on the password reset link provided in their email to access this endpoint.\n- After successfully resetting the password, the user can log in with their new password.\n\n<!-- REQUEST -->\n***\nRequest Body:\n- password (string, required): The new password for the user's account. The password must meet the following criteria:\n  - Minimum length: 8 characters\n  - At least one uppercase letter\n  - At least one lowercase letter\n  - At least one numeric digit\n  - At least one special character (!@#$%^&*)\n***\n- Example Request:\n  - POST /api/password/:token/reset-password\n- Content-Type: \n  - application/json\n\n```\n{\n  \"password\": \"NewPassword123!\"\n}\n```\n\n***\n<!-- END REQUEST -->\n\n\nResponse:\n- 200 OK: Password reset successful.\n- 400 Bad Request: Invalid request or validation error.\n- 404 Not Found: User not found.\n- 500 Internal Server Error: An error occurred on the server.\n<!-- RESPONSE -->\n***\n- Example Response:\n  - HTTP/1.1 200 OK\n- Content-Type: \n  - application/json\n\n```\n{\n  \"message\": \"Password reset successful\"\n}\n\n```\n\n***\n<!-- END RESPONSE -->\n","method":"POST","body":{"mimeType":"application/json","text":"{\n\t\"password\":\"taha123456T@$\" \n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json"}],"authentication":{},"metaSortKey":-1688443701547,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_3998bc83de7447a7b0981516fd62f8aef48a0028","parentId":"wrk_e0b8fb234b8e4ce78d30ff7cab7ed2a2","modified":1688337161587,"created":1687523002677,"name":"Base Environment","data":{},"dataPropertyOrder":{},"color":null,"isPrivate":false,"metaSortKey":1687523002677,"_type":"environment"},{"_id":"jar_3998bc83de7447a7b0981516fd62f8aef48a0028","parentId":"wrk_e0b8fb234b8e4ce78d30ff7cab7ed2a2","modified":1688260510390,"created":1687523002693,"name":"Default Jar","cookies":[{"key":"connect.sid","value":"s%3AF1VzyQIHtEkutpwfEmX1s4B_9mlVGTeB.DuRNLsAyH0EyyAD00zrnt3dwyisv1O6zaPxohcDKoQQ","domain":"localhost","path":"/","httpOnly":true,"hostOnly":true,"creation":"2023-06-23T23:36:05.572Z","lastAccessed":"2023-07-02T01:15:10.390Z","id":"36314061416338883"},{"key":"ux_exp_id","value":"439bb024-a6b0-4a1b-8ab0-d47eebdf2c7e","expires":"2024-06-28T10:25:47.000Z","maxAge":31557600,"domain":"starbucks.com","path":"/","secure":true,"extensions":["SameSite=Lax"],"hostOnly":false,"creation":"2023-06-29T04:25:47.554Z","lastAccessed":"2023-06-29T04:25:47.554Z","id":"5035474755039859"},{"key":"s_check","expires":"1970-01-01T00:00:00.000Z","domain":"www.starbucks.com","path":"/","hostOnly":true,"creation":"2023-06-29T04:25:47.558Z","lastAccessed":"2023-06-29T04:25:47.558Z","id":"8484277749308431"}],"_type":"cookie_jar"},{"_id":"spc_7ce4a65f991146ae9ef433a962f0ba80","parentId":"wrk_e0b8fb234b8e4ce78d30ff7cab7ed2a2","modified":1688604816916,"created":1688604816916,"fileName":"SEFF--User API ","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"},{"_id":"uts_f3ecfac7518f4056818badfece5d5dc3","parentId":"wrk_e0b8fb234b8e4ce78d30ff7cab7ed2a2","modified":1687523002729,"created":1687523002729,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"env_355a657c9b29452c9dda50491cfb172c","parentId":"env_3998bc83de7447a7b0981516fd62f8aef48a0028","modified":1688624408928,"created":1688541869554,"name":"New Environment","data":{},"dataPropertyOrder":{},"color":null,"isPrivate":false,"metaSortKey":1688541869554,"_type":"environment"},{"_id":"ut_76403c357d2948d08a5ed51d2aa558e6","parentId":"uts_f3ecfac7518f4056818badfece5d5dc3","modified":1688604535645,"created":1688604512007,"requestId":"req_24183853a9894dc98c58d0551eedb7b8","name":"Returns 201","code":"const response1 = await insomnia.send();\nexpect(response1.status).to.equal(200);","_type":"unit_test"}]}